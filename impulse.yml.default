# timeouts:
#   firing: 6h ### After this time Incident status will change from "firing" to "unknown" if no new alerts appear
#   unknown: 6h ### After this time Incident status will change from "resolved" to "closed" if no new alerts appear
#   resolved: 12h ### After this time Incident status will change from "resolved" to "closed" if no new alerts appear


route:
  channel: space ### default Slack channel for Incidents
  # chain: warning ### default chain which will be used in default Slack channel
  # routes:
  # - matchers:
  #   - severity="warning"
  #   channel: warning
  #   chain: warning
  # - matchers:
  #   - team="space"
  #   - instance =~ "localhost.*"
  #   channel: space
  #   chain: firing_team
  #   routes:
  #   - matchers:
  #     - severity="critical"
  #     channel: space
  #     chain: firing_team_critical
  # - matchers:
  #   - team="infrastructure"
  #   channel: infrastructure
  #   chain: infra


application: ### instant messaging app configuration
  type: slack ### only 'slack' available now
  # admin_channel: impulse_admin ### default channel where IMPulse warnings will be send
  # chains: ### chains used to describe notifications order
  #   firing_team:
  #   - user: Alex
  #   - wait: 10m
  #   - user: Dmitry
  #   warning:
  #   - user_group: devops_squad
  #   - wait: 5m
  #   - webhook: Alex_call
  # user_groups: ### user groups used to notify multiple users with one message
  #   devops_squad:
  #     users: [Dmitry, Alex]
  # users: ### Slack users with their actual Full Names
  #   Dmitry: {full_name: "Dmitry Tsybus"}
  #   Alex: {full_name: "Alex Johnovich"}
  # message_template: | ### template for construct Incident message as you wish
  #   {% set status = payload.get("status", "Unknown") -%}
  #   {% set annotations = payload.get("commonAnnotations", {}).copy() -%}
  #   {% set commonLabels = payload.get("commonLabels", {}) -%}
  #   {% set status_emoji = {"firing": ":fire:", "resolved": ":white_check_mark:"}[status] | default(":warning:") -%}
  #   {{ status_emoji }} {{ commonLabels.alertname }}
  #   -
  #   {% set annotations = payload.get("commonAnnotations", {}) -%}
  #   {% set groupLabels = payload.get("groupLabels", {}) -%}
  #   {% set commonLabels = payload.get("commonLabels", {}) -%}
  #   {% set severity = groupLabels.severity -%}
  #   {% set alerts = payload.get("alerts", {}) -%}
  #   {% set severity_emoji = {"critical": ":rotating_light:", "warning": ":warning:" }[severity] | default(":question:") -%}
  #   *{{ annotations.summary }}*
  #   {% if annotations.description %}_{{ annotations.description }}_{% endif -%}
  #   {%- if alerts[0].labels.instance %}
  #   *Instance:* {{ alerts[0].labels.instance }}  {%- for l in alerts[0].labels.keys() if l != 'alertname' and l != 'region' and l != 'instance' and l not in commonLabels.keys() -%}{{l}}=`{{ alerts[0].labels[l] }}`{% if not loop.last %},  {% endif %}{% endfor %}
  #   {%- endif %}
  #   {%- if annotations.value %}
  #   *Value:* {{ annotations.value }}
  #   {%- endif %}
  #   {%- if commonLabels | length > 0 %}
  #   *Labels:*
  #   {%- for k, v in commonLabels.items() if k != 'alertname' and k != 'instance' %}
  #       {{ k }}=`{{ v }}`
  #   {%- endfor %}
  #   {%- endif %}
  #   {% if annotations.expr %} <{% raw %}https://grafana.com/explore?orgId=1&left=%7B"datasource":"prometheus_1","queries":%5B%7B"refId":"A","datasource":%7B"type":"prometheus","uid":"prometheus_1"%7D,"editorMode":"code","expr":"{% endraw %}{{ annotations.expr | urlencode | replace('%2C',',') | replace('%5C','%5C%22') | replace('%22','%5C%22') | replace('/','%2F') | replace('%0A','') }}{% raw %}","legendFormat":"__auto","range":true,"instant":true%7D%5D,"range":%7B"from":"now-1h","to":"now"%7D%7D{% endraw %}|:grafana:>{% endif %}


# webhooks: ### custom object to create POST requests from 'application.chains'
#   Alex_call:
#     url: "https://api.twilio.com/2010-04-01/Accounts/{{ env['TWILIO_ACCOUNT_SID'] }}/Calls.json"
#     data:
#       To: '+998xxxxxxxxx'
#       From: "{{ env['TWILIO_NUMBER'] }}"
#       Url: http://example.com/twiml.xml
#     user: "{{ env['TWILIO_ACCOUNT_SID'] }}:{{ env['TWILIO_AUTH_TOKEN'] }}"
